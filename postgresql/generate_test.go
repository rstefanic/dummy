package postgresql

import (
	"os"
	"strings"
	"testing"

	"github.com/brianvoe/gofakeit/v7"
)

func TestMain(m *testing.M) {
	gofakeit.Seed(1) // pin the seed so we can test the outputs
	code := m.Run()
	os.Exit(code)
}

func compare(t *testing.T, actual, expected string) {
	if strings.Compare(actual, expected) != 0 {
		t.Errorf("\nExpected:\n%s\n\nGot:\n%s", expected, actual)
	}
}

func TestBigInt(t *testing.T) {
	expected := "9172393864939720632"
	actual, err := fakeData("bigint", "int8")

	if err != nil {
		t.Errorf(`Error calling "fakeData(bigint, int8)"`)
	}

	compare(t, actual, expected)
}

func TestBitString(t *testing.T) {
	expected := "B'10010011'"
	actual, err := fakeData("bit", "bit")

	if err != nil {
		t.Errorf(`Error calling "fakeData(bit, bit)"`)
	}

	compare(t, actual, expected)
}

func TestBoolean(t *testing.T) {
	expected := "false"
	actual, err := fakeData("boolean", "bool")

	if err != nil {
		t.Errorf(`Error calling "fakeData(boolean, bool)"`)
	}

	compare(t, actual, expected)
}

func TestDoublePrecision(t *testing.T) {
	expected := "0.235012593156176"
	actual, err := fakeData("double precision", "float8")

	if err != nil {
		t.Errorf(`Error calling "fakeData(double precision, float8)"`)
	}

	compare(t, actual, expected)
}

func TestInteger(t *testing.T) {
	expected := "-28438"
	actual, err := fakeData("integer", "int4")

	if err != nil {
		t.Errorf(`Error calling "fakeData(integer, int4)"`)
	}

	compare(t, actual, expected)
}

func TestNumeric(t *testing.T) {
	expected := "0811322671379150800157326235129945846821868512082537553695051971385284931761246231929013318345066849917934051195957005010251086127251253247586544397624525817539412331020434533385244205839290898122610708792367424668706785602363133320999798373918937192620122973904883210291017769830401549207192956615190582268764524782270053256398776771672152780608916891641197080442825486207178932425244851564734834984997608521734254687764242389127017711273996171340978533251579592924160545247932962012446230696058879773088763428272479238155885078944564082788458188430811113613818887378747863246531003871981073123085604417132219541113622202359094793505964425435060140804042966939739556761181864615569083045878909613100980618970189976712351459862055050461852410033003975448020666611730725960230218276123471670335554280490580672785225578363487366563112462792908834308281373772630585981225050222100393128762580847975949664061258788319913373775111260675684962953422609197029669144739593584421797864202355541581665875606117887864451984880804058947095035526888879126498479253710627995574347430850941507795714438026782504794660897714764065681262408427994558177621909508050642133368891769196134.87992980890452687254496530281313452418308345021556333328844056423075080503914600194182954116175192500973757212788055885878554177881573616281112314068453399355132608721902110751028326865857195352021920627063893774272105015640408231004126336166067368266170432356875949095918729330061322837976048643355377987347752485445937801199834615023850725496472663116326787692475932028853752084446222839821959831085052904942698178663649074776276298916702589849108030601435167976546227245223824652648480063672691841140208329324165280831672559268430900064213466316753366720010921992516265579935933807071036024447911179919236736188738536894079802716577648912780779843475591402407594663968330052276661265037781163882391143569566432364609581498810272195155009602718117577770537440451654376437961825958378189595014180064249539131383764526015179968661663911853251711366380073449666126951630357938227997176691469452842270548683727452866126429493220182116033086781796361447098320428324684146136960681826331250034160375544085503358349063914014999081614432871129551137387177659735463684332702551331202052186789176468625828452764878380113607044631326514479201033906110403724314335036748880736278178661364966674853199402263699151738826215930031067256420764732076202757150197405565632507533321973738817684412927257993684883597789783081723700826422795880358219850280172379023689421358267314951340406962754151194627892248864207035979445571689389893633771219546772674079697396401868269194535073272288076483773344562041892500972543121344710199139334924819157049167196446641282737591616825524467679375935855206664951500979330582224769914929395493719105239778437739773539928993785611978977080573585720446591374988877866859425678899823402187048584913024519630570737461927925698480967934196518367422192188237220497546795359871896492952209137646412773319685205490649833244204108611457350128404816483622851463976475276086630563802309761158009662717535110150798447337692322861134380852269898575322195498562814722437274412857643734864028472961746534644140697056264749133339905947992944012703061546102882064270400407857987655683346950518651495252836564781646394841820944574496860695411739242457590631661661547882409766760215648912956172546926759657441570579545260380680939886175013544496371294972932973316727970103458967261179330836019509528792136757989150787883495359047589484011175868195549046335239158328898502795916121560547264832009402402554538838328072504796043368737999708978613816726229375589928651026544851407120524127569532239439569541111923050373306385611422806311984802949522678474824139020702705618755062400723538490630278613321321248173984131778004934037284652818109921507965428578478294179794295290802095134495955561361263155688989612738480822907710367986437375620747733815346501240347525275096711211673226177412836742103075695765188968360031211526512449151646019612472253021661922726016441417651380020924093669082251497666253891755614617166877668644615675222697849336886463974562742834157737744908426889577868746289771202026758292426680598757880018309858801381330961195995639481883408539745478023248269127637914653590716485573751086011213572767004091616218020075699715894498909652159040668906731163211735270470041610646532969661810174903919638974043806125409784342186903782468461221315530063715488970333289193040661948673687731637827436533966326937687370895162775013966360755231399556294857995120560549478670281421455223060384796398890936287306146599329091748277434694705979028840496943856720166176073972535359324096527285804041959642726142398402367324313775604814904705392033018696269388942421528447982687700299483980172429118791197041091738000185262973878975054671923688495871852215479968030372221069913776927454180536311459848892985236130577211707915003414868655291401706012563162775643944282198862662712203864043955232248344713120535936431498737347099429355436765418379656929571300809451488537991373675074347585119593561316716789917184277971243673401882997660985385891303932402262651724240882896890190129713545936971566751629306718402842946616956373107713909904273014304620871852365138497264367483013409913300055921644088221548191066857413318010318777026151869045348830558144803613949522957875509715489598963684836071802926371536936965649446547838020979558356455330160231208151240193213760801490063461527436557847623903438505637895621099217139827745513799234386017683489118472138182434479499147278787599564000329534917377960473995169650848181752692088135726544193653408627237649466739629556459897440184226370110346123463165477129384727545310920237483762494040825160540138745180564578738844479523027598231096209078179330174507814420095659842868585659211643649810573231936376710035680370679700159666241700179361955272619948766148099405166149056054896418052819759318327293220423761518288989493356570742427116068890597576722619546529974317922650878328221322279169804158976560977284132291535699072193502199306992087022023725391295221317099229619124887663955304063509554000874356984955994967300635900946216915508274694032931971385578508090212254115711154651556557938861455183629520166807525517360116727207962789541977883636363052739090954907315606517666083348188219199180032481085469293513083417195064522542135250938199742196744871558011247548696431501559508883491853695934006557871676593932172481892472939452502500868163104373878178356241927136390965335488555471398007713390352358517555835886478962177048599332798130977254243107604918257895016295613875937478991054613977193667996777707636356121532119996832022225382481327474263037075324562297107857651739270902050843230904059839126365896774745304461783422209500083281101190640601784898621551638607491956566500092751786335265012207000573661805704937917212531690338798024083238073460356465865072789319129369000990885067571814389253346385785989360299992178987230534273270430633322960364416204858899529828036608241746532484043879023972331608612622699679252965473987442069084845874959730613267361376435463383306745727295658410885637442086950346592210715354549901582080838198257854287789101495305424388067005575668196832081654725527976335536486574635214332077403670868957585641046939223405061472427294905690628796510931009629569588961007047965162993220478638153795278081608845769168079824088503808244852662740970731368882057783991357069019205027359642509239738047670163332752723946697636636342187768530103807303613333553685034648357772521840809436293646781914071498647117274321192185589853606754370259291314429488325077036650837588376554485374509450590364918906578054057616651910448913413403176659998931171572795711627945508697646844843432637332022579395491496978972168388210871560652282659036966730951238031668851407105115426293677643629982582486828026797997077581572001189076104395370004577916669973184686055910684326701751570731664659473334401921382722512191378853369744548668750927769196705326232823322287256204430902344501446485159904397788144089041689260131755708740895902356910544626110408997764950442548170008000886150555273146394797497934428697161153578732643969177034837341453786644487456393281331455710950987309398393822009033682034453963255037346513394938564316433746458482830021259189253"
	actual, err := fakeData("numeric", "numeric")

	if err != nil {
		t.Errorf(`Error calling "fakeData(numeric, numeric)"`)
	}

	compare(t, actual, expected)
}

func TestReal(t *testing.T) {
	expected := "0.232006"
	actual, err := fakeData("real", "float4")

	if err != nil {
		t.Errorf(`Error calling "fakeData(real, float4)"`)
	}

	compare(t, actual, expected)
}

func TestSmallSerial(t *testing.T) {
	expected := "4083"
	actual, err := fakeData("smallint", "int2")

	if err != nil {
		t.Errorf(`Error calling "fakeData(smallint, int2)"`)
	}

	compare(t, actual, expected)
}

func TestText(t *testing.T) {
	expected := "'I.e..'"
	actual, err := fakeData("text", "text")

	if err != nil {
		t.Errorf(`Error calling "fakeData(text, text)"`)
	}

	compare(t, actual, expected)
}

func TestTimestampWithoutTimeZone(t *testing.T) {
	expected := "'2002-04-30'"
	actual, err := fakeData("timestamp without time zone", "timestamp")

	if err != nil {
		t.Errorf(`Error calling "fakeData(timestamp without time zone, timestamp)"`)
	}

	compare(t, actual, expected)
}

func TestUuid(t *testing.T) {
	expected := "'e23e206b-2791-40a2-9df9-8ee09af3101c'"
	actual, err := fakeData("uuid", "uuid")

	if err != nil {
		t.Errorf(`Error calling "fakeData(uuid, uuid)"`)
	}

	compare(t, actual, expected)
}
