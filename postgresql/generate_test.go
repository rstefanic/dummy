package postgresql

import (
	"os"
	"strings"
	"testing"

	"github.com/brianvoe/gofakeit/v7"
)

func TestMain(m *testing.M) {
	gofakeit.Seed(1) // pin the seed so we can test the outputs
	code := m.Run()
	os.Exit(code)
}

func compare(t *testing.T, actual, expected string) {
	if strings.Compare(actual, expected) != 0 {
		t.Errorf("\nExpected:\n%s\n\nGot:\n%s", expected, actual)
	}
}

func TestBigInt(t *testing.T) {
	expected := "9172393864939720632"
	actual, err := fakeData("bigint", "int8")

	if err != nil {
		t.Errorf(`Error calling "fakeData(bigint, int8)"`)
	}

	compare(t, actual, expected)
}

func TestBitString(t *testing.T) {
	expected := "B'10010011'"
	actual, err := fakeData("bit", "bit")

	if err != nil {
		t.Errorf(`Error calling "fakeData(bit, bit)"`)
	}

	compare(t, actual, expected)
}

func TestBoolean(t *testing.T) {
	expected := "true"
	actual, err := fakeData("boolean", "bool")

	if err != nil {
		t.Errorf(`Error calling "fakeData(boolean, bool)"`)
	}

	compare(t, actual, expected)
}

func TestDecimal(t *testing.T) {
	expected := "40811322671379150800157326235129945846821868512082537553695051971385284931761246231929013318345066849917934051195957005010251086127251253247586544397624525817539412331020434533385244205839290898122610708792367424668706785602363133320999798373918937192620122973904883210291017769830401549207192956615190582268764524782270053256398776771672152780608916891641197080442825486207178932425244851564734834984997608521734254687764242389127017711273996171340978533251579592924160545247932962012446230696058879773088763428272479238155885078944564082788458188430811113613818887378747863246531003871981073123085604417132219541113622202359094793505964425435060140804042966939739556761181864615569083045878909613100980618970189976712351459862055050461852410033003975448020666611730725960230218276123471670335554280490580672785225578363487366563112462792908834308281373772630585981225050222100393128762580847975949664061258788319913373775111260675684962953422609197029669144739593584421797864202355541581665875606117887864451984880804058947095035526888879126498479253710627995574347430850941507795714438026782504794660897714764065681262408427994558177621909508050642133368891769196134879929808904526872544965302813134524183083450215563333288440564230750805039146001941829541161751925009737572127880558858785541778815736162811123140684533993551326087219021107510283268658571953520219206270638937742721050156404082310041263361660673682661704323568759490959187293300613228379760486433553779873477524854459378011998346150238507254964726631163267876924759320288537520844462228398219598310850529049426981786636490747762762989167025898491080306014351679765462272452238246526484800636726918411402083293241652808316725592684309000642134663167533667200109219925162655799359338070710360244479111799192367361887385368940798027165776489127807798434755914024075946639683300522766612650377811638823911435695664323646095814988102721951550096027181175777705374404516543764379618259583781895950141800642495391313837645260151799686616639118532517113663800734496661269516303579382279971766914694528422705486837274528661264294932201821160330867817963614470983204283246841461369606818263312500341603755440855033583490639140149990816144328711295511373871776597354636843327025513312020521867891764686258284527648783801136070446313265144792010339061104037243143350367488807362781786613649666748531994022636991517388262159300310672564207647320762027571501974055656325075333219737388176844129272579936848835977897830817237008264227958803582198502801723790236894213582673149513404069627541511946278922488642070359794455716893898936337712195467726740796973964018682691945350732722880764837733445620418925009725431213447101991393349248191570491671964466412827375916168255244676793759358552066649515009793305822247699149293954937191052397784377397735399289937856119789770805735857204465913749888778668594256788998234021870485849130245196305707374619279256984809679341965183674221921882372204975467953598718964929522091376464127733196852054906498332442041086114573501284048164836228514639764752760866305638023097611580096627175351101507984473376923228611343808522698985753221954985628147224372744128576437348640284729617465346441406970562647491333399059479929440127030615461028820642704004078579876556833469505186514952528365647816463948418209445744968606954117392424575906316616615478824097667602156489129561725469267596574415705795452603806809398861750135444963712949729329733167279701034589672611793308360195095287921367579891507878834953590475894840111758681955490463352391583288985027959161215605472648320094024025545388383280725047960433687379997089786138167262293755899286510265448514071205241275695322394395695411119230503733063856114228063119848029495226784748241390207027056187550624007235384906302786133213212481739841317780049340372846528181099215079654285784782941797942952908020951344959555613612631556889896127384808229077103679864373756207477338153465012403475252750967112116732261774128367421030756957651889683600312115265124491516460196124722530216619227260164414176513800209240936690822514976662538917556146171668776686446156752226978493368864639745627428341577377449084268895778687462897712020267582924266805987578800183098588013813309611959956394818834085397454780232482691276379146535907164855737510860112135727670040916162180200756997158944989096521590406.6890673116321173527047004161064653296966181017490391963897404380612540978434218690378246846122131553006371548897033328919304066194867368773163782743653396632693768737089516277501396636075523139955629485799512056054947867028142145522306038479639889093628730614659932909174827743469470597902884049694385672016617607397253535932409652728580404195964272614239840236732431377560481490470539203301869626938894242152844798268770029948398017242911879119704109173800018526297387897505467192368849587185221547996803037222106991377692745418053631145984889298523613057721170791500341486865529140170601256316277564394428219886266271220386404395523224834471312053593643149873734709942935543676541837965692957130080945148853799137367507434758511959356131671678991718427797124367340188299766098538589130393240226265172424088289689019012971354593697156675162930671840284294661695637310771390990427301430462087185236513849726436748301340991330005592164408822154819106685741331801031877702615186904534883055814480361394952295787550971548959896368483607180292637153693696564944654783802097955835645533016023120815124019321376080149006346152743655784762390343850563789562109921713982774551379923438601768348911847213818243447949914727878759956400032953491737796047399516965084818175269208813572654419365340862723764946673962955645989744018422637011034612346316547712938472754531092023748376249404082516054013874518056457873884447952302759823109620907817933017450781442009565984286858565921164364981057323193637671003568037067970015966624170017936195527261994876614809940516614905605489641805281975931832729322042376151828898949335657074242711606889059757672261954652997431792265087832822132227916980415897656097728413229153569907219350219930699208702202372539129522131709922961912488766395530406350955400087435698495599496730063590094621691550827469403293197138557850809021225411571115465155655793886145518362952016680752551736011672720796278954197788363636305273909095490731560651766608334818821919918003248108546929351308341719506452254213525093819974219674487155801124754869643150155950888349185369593400655787167659393217248189247293945250250086816310437387817835624192713639096533548855547139800771339035235851755583588647896217704859933279813097725424310760491825789501629561387593747899105461397719366799677770763635612153211999683202222538248132747426303707532456229710785765173927090205084323090405983912636589677474530446178342220950008328110119064060178489862155163860749195656650009275178633526501220700057366180570493791721253169033879802408323807346035646586507278931912936900099088506757181438925334638578598936029999217898723053427327043063332296036441620485889952982803660824174653248404387902397233160861262269967925296547398744206908484587495973061326736137643546338330674572729565841088563744208695034659221071535454990158208083819825785428778910149530542438806700557566819683208165472552797633553648657463521433207740367086895758564104693922340506147242729490569062879651093100962956958896100704796516299322047863815379527808160884576916807982408850380824485266274097073136888205778399135706901920502735964250923973804767016333275272394669763663634218776853010380730361333355368503464835777252184080943629364678191407149864711727432119218558985360675437025929131442948832507703665083758837655448537450945059036491890657805405761665191044891341340317665999893117157279571162794550869764684484343263733202257939549149697897216838821087156065228265903696673095123803166885140710511542629367764362998258248682802679799707758157200118907610439537000457791666997318468605591068432670175157073166465947333440192138272251219137885336974454866875092776919670532623282332228725620443090234450144648515990439778814408904168926013175570874089590235691054462611040899776495044254817000800088615055527314639479749793442869716115357873264396917703483734145378664448745639328133145571095098730939839382200903368203445396325503734651339493856431643374645848283002125918925361318291120349604006471379748999792042010578154211753245378397376782919407316626199014098523851980791262228128401004340416681867795427982736089853882074319203282855129714357587749717967734455605075123059598432828269144824939012623771713334916627891767680297816018444902468781699829097514089164006564746261175951256372105277478817005942835573196116583354692827287973380425044987642029948857014069117209417109193059225805775831328694599404666710037040414608305213698174860060789014597846321941942371976524520566466202161646757108974720883130585631260372017688150030748949331715652210552043698985119321539841345067146670154982565323726833447253964500452825545718888899277486230789258493354235728587577010334817267059396071235945567602392577231758218890410277600948051463650345228177239258121970675940783843210808925786282526535340034448583266908061489237555351014162315889158638128346841067197291304903469219005949956545783799616510157422989748156804362394169323478072206463264016692829571131695206691309936965757810351016829382526117100562429248995065823321783781226888376905852755270575034254674492126956249514705293081742801655720501211403866098576523441507404349482534103535450252565108530525217820904125689442966018748732683971413148454854356158463022280075743012804110015683793491791977755469434591596842341960491426890413834422616444386332335869596639087294413016739632947586167730878688481390819646651286787313364837719932023951811768739117115768819506174943307040541848374470985488029995416607800546877322670913559591356923752221366485952178110445534986721381523365013123935716418829244356089733335054860544219608204971205701852661526896148264372998611570385306282834436330841563257083188324633675691403492238673529588079897647427381213557184418036795582118991249936556809942"
	actual, err := fakeData("decimal", "decimal")

	if err != nil {
		t.Errorf(`Error calling "fakeData(decimal, decimal)"`)
	}

	compare(t, actual, expected)
}

func TestDoublePrecision(t *testing.T) {
	expected := "0.488526490500418"
	actual, err := fakeData("double precision", "float8")

	if err != nil {
		t.Errorf(`Error calling "fakeData(double precision, float8)"`)
	}

	compare(t, actual, expected)
}

func TestInteger(t *testing.T) {
	expected := "26660"
	actual, err := fakeData("integer", "int4")

	if err != nil {
		t.Errorf(`Error calling "fakeData(integer, int4)"`)
	}

	compare(t, actual, expected)
}

func TestReal(t *testing.T) {
	expected := "0.956915"
	actual, err := fakeData("real", "real")

	if err != nil {
		t.Errorf(`Error calling "fakeData(real, real)"`)
	}

	compare(t, actual, expected)
}

func TestSerial(t *testing.T) {
	expected := "649450162"
	actual, err := fakeData("serial", "serial")

	if err != nil {
		t.Errorf(`Error calling "fakeData(real, real)"`)
	}

	compare(t, actual, expected)
}

func TestSmallSerial(t *testing.T) {
	expected := "19030"
	actual, err := fakeData("smallserial", "smallserial")

	if err != nil {
		t.Errorf(`Error calling "fakeData(smallserial, smallserial)"`)
	}

	compare(t, actual, expected)
}

func TestText(t *testing.T) {
	expected := "'Talk.'"
	actual, err := fakeData("text", "text")

	if err != nil {
		t.Errorf(`Error calling "fakeData(text, text)"`)
	}

	compare(t, actual, expected)
}

func TestTimestamp(t *testing.T) {
	expected := "'1930-05-18'"
	actual, err := fakeData("timestamp", "timestamp")

	if err != nil {
		t.Errorf(`Error calling "fakeData(timestamp, timestamp)"`)
	}

	compare(t, actual, expected)
}

func TestUuid(t *testing.T) {
	expected := "'8180d02d-a62d-449d-bf13-4e259f5c72f8'"
	actual, err := fakeData("uuid", "uuid")

	if err != nil {
		t.Errorf(`Error calling "fakeData(uuid, uuid)"`)
	}

	compare(t, actual, expected)
}
